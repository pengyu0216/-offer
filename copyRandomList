import java.util.HashMap;

public class Solution {
    //创建旧节点与新节点对应的HashMap
    HashMap<RandomListNode, RandomListNode> visited = new HashMap<>();
    
    //如果指针指向的节点不存在，则创建
    public RandomListNode CreateNode(RandomListNode node)
    {
        if (node != null) {
            if (visited.containsKey(node)) {
                return visited.get(node);
            }else {
                visited.put(node, new RandomListNode(node.label));
                return visited.get(node);
            }
        }
        return null;
    }
    
    //复制第一个节点，迭代知道整个链表复制完
    public RandomListNode Clone(RandomListNode pHead) {
        if (pHead == null) {
            return null;
        }
        RandomListNode oldNode = pHead;
        RandomListNode newNode = new RandomListNode(oldNode.label);
        visited.put(oldNode, newNode);

        while (oldNode != null) {
            newNode.random = CreateNode(oldNode.random);
            newNode.next = CreateNode(oldNode.next);

            oldNode = oldNode.next;
            newNode = newNode.next;
        }

        return visited.get(pHead);
    }

}
